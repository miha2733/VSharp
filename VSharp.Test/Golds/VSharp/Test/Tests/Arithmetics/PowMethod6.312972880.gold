METHOD: System.Double VSharp.Test.Tests.Arithmetics.PowMethod6(System.Double)
RESULT: Totally 4 states:
pow(-x, x)
MEMORY DUMP:
Path condition: x < 0 /\ x < 8
--------------- Array contents: ---------------
System.Double[] ==> {
        15.3[0] <- 1
        15.3[1] <- 10
        15.3[2] <- 100
        15.3[3] <- 1000
        15.3[4] <- 10000
        15.3[5] <- 100000
        15.3[6] <- 1000000
        15.3[7] <- 10000000
        15.3[8] <- 100000000
        15.3[9] <- 1000000000
        15.3[10] <- 10000000000
        15.3[11] <- 100000000000
        15.3[12] <- 1000000000000
        15.3[13] <- 10000000000000
        15.3[14] <- 100000000000000
        15.3[15] <- 1000000000000000
    }
--------------- Array lengths: ---------------
System.Double[] ==> {15.3[0] <- 16}
--------------- Types tokens: ---------------
15.3 ==> System.Double[]
--------------- Static fields: ---------------
E ==> {System.Math <- 2.718281828459045}
PI ==> {System.Math <- 3.141592653589793}
roundPower10Double ==> {System.Math <- (HeapRef 15.3 to System.Double[])}
--------------- Stack: ---------------
key = __loc__0, value = -x
key = __loc__1, value = x
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Arithmetics, System.Math }

pow(x, x)
MEMORY DUMP:
Path condition: !(x < 0) /\ x < 8
--------------- Array contents: ---------------
System.Double[] ==> {
        15.3[0] <- 1
        15.3[1] <- 10
        15.3[2] <- 100
        15.3[3] <- 1000
        15.3[4] <- 10000
        15.3[5] <- 100000
        15.3[6] <- 1000000
        15.3[7] <- 10000000
        15.3[8] <- 100000000
        15.3[9] <- 1000000000
        15.3[10] <- 10000000000
        15.3[11] <- 100000000000
        15.3[12] <- 1000000000000
        15.3[13] <- 10000000000000
        15.3[14] <- 100000000000000
        15.3[15] <- 1000000000000000
    }
--------------- Array lengths: ---------------
System.Double[] ==> {15.3[0] <- 16}
--------------- Types tokens: ---------------
15.3 ==> System.Double[]
--------------- Static fields: ---------------
E ==> {System.Math <- 2.718281828459045}
PI ==> {System.Math <- 3.141592653589793}
roundPower10Double ==> {System.Math <- (HeapRef 15.3 to System.Double[])}
--------------- Stack: ---------------
key = __loc__0, value = x
key = __loc__1, value = x
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Arithmetics, System.Math }

pow(-x, -x)
MEMORY DUMP:
Path condition: !(x < 8) /\ x < 0
--------------- Array contents: ---------------
System.Double[] ==> {
        15.3[0] <- 1
        15.3[1] <- 10
        15.3[2] <- 100
        15.3[3] <- 1000
        15.3[4] <- 10000
        15.3[5] <- 100000
        15.3[6] <- 1000000
        15.3[7] <- 10000000
        15.3[8] <- 100000000
        15.3[9] <- 1000000000
        15.3[10] <- 10000000000
        15.3[11] <- 100000000000
        15.3[12] <- 1000000000000
        15.3[13] <- 10000000000000
        15.3[14] <- 100000000000000
        15.3[15] <- 1000000000000000
    }
--------------- Array lengths: ---------------
System.Double[] ==> {15.3[0] <- 16}
--------------- Types tokens: ---------------
15.3 ==> System.Double[]
--------------- Static fields: ---------------
E ==> {System.Math <- 2.718281828459045}
PI ==> {System.Math <- 3.141592653589793}
roundPower10Double ==> {System.Math <- (HeapRef 15.3 to System.Double[])}
--------------- Stack: ---------------
key = __loc__0, value = -x
key = __loc__1, value = -x
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Arithmetics, System.Math }

pow(x, x)
MEMORY DUMP:
Path condition: !(x < 0) /\ !(x < 8)
--------------- Array contents: ---------------
System.Double[] ==> {
        15.3[0] <- 1
        15.3[1] <- 10
        15.3[2] <- 100
        15.3[3] <- 1000
        15.3[4] <- 10000
        15.3[5] <- 100000
        15.3[6] <- 1000000
        15.3[7] <- 10000000
        15.3[8] <- 100000000
        15.3[9] <- 1000000000
        15.3[10] <- 10000000000
        15.3[11] <- 100000000000
        15.3[12] <- 1000000000000
        15.3[13] <- 10000000000000
        15.3[14] <- 100000000000000
        15.3[15] <- 1000000000000000
    }
--------------- Array lengths: ---------------
System.Double[] ==> {15.3[0] <- 16}
--------------- Types tokens: ---------------
15.3 ==> System.Double[]
--------------- Static fields: ---------------
E ==> {System.Math <- 2.718281828459045}
PI ==> {System.Math <- 3.141592653589793}
roundPower10Double ==> {System.Math <- (HeapRef 15.3 to System.Double[])}
--------------- Stack: ---------------
key = __loc__0, value = x
key = __loc__1, value = x
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Arithmetics, System.Math }
