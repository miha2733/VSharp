METHOD: System.Int32 VSharp.Test.Tests.RecursiveAccess.TestStack(VSharp.Test.Tests.Second)
RESULT: Totally 3 states:
0
MEMORY DUMP:
Path condition: 0 == b
Initialized types = { VSharp.Test.Tests.RecursiveAccess }

0
MEMORY DUMP:
Path condition: !VSharp.Test.Tests.Second_initialized /\ !(0 == b) /\ !(0 == b) /\ 0 == b.b /\ !(0 == b) /\ !(0 == b) /\ !(0 == b) /\ 0 == b.b /\ !(0 == b) /\ !(0 == b)
Initialized types = { VSharp.Test.Tests.Second, VSharp.Test.Tests.RecursiveAccess }

b.b.B
MEMORY DUMP:
Path condition: !VSharp.Test.Tests.Second_initialized /\ !(0 == b) /\ !(0 == b) /\ !(0 == b) /\ !(0 == b.b) /\ !(0 == b) /\ !(0 == b) /\ !(0 == b.b) /\ !(0 == b) /\ !(0 == b) /\ !(0 == b) /\ !(0 == b.b) /\ !(0 == b) /\ !(0 == b) /\ !(0 == b) /\ !(0 == b.b) /\ !(0 == b)
--------------- Fields: ---------------
B ==> {b.b <- 1 + b.b.B}
Initialized types = { VSharp.Test.Tests.Second, VSharp.Test.Tests.First, VSharp.Test.Tests.RecursiveAccess }
