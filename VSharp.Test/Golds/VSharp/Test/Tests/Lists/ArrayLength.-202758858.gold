METHOD: System.Int32 VSharp.Test.Tests.Lists.ArrayLength(System.Int32)
RESULT: Totally 3 states:
10
MEMORY DUMP:
Path condition: 0 == f
--------------- Array contents: ---------------
System.Int32[] ==> {
        4[0] <- 0
        4[1] <- 1
        4[2] <- 2
        4[3] <- 3
        4[4] <- 4
        4[5] <- 5
        4[6] <- 6
        4[7] <- 7
        4[8] <- 8
        4[9] <- 9
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {4[0] <- 10}
--------------- Types tokens: ---------------
4 ==> System.Int32[]
--------------- Stack: ---------------
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
key = __loc__0, value = (HeapRef 4 to System.Int32[])
--------------- Initialized types: ---------------
{ System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Lists }

1 + f
MEMORY DUMP:
Path condition: !(0 == f) /\ !(1 + f < 0) /\ !(1 == f)
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 1 + f}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
--------------- Stack: ---------------
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
key = __loc__0, value = (HeapRef 2 to System.Int32[])
--------------- Initialized types: ---------------
{ VSharp.Test.Tests.Lists }

3
MEMORY DUMP:
Path condition: !(0 == f) /\ 1 == f
--------------- Array contents: ---------------
System.Int32[] ==> {3[0] <- 1; 3[1] <- 2; 3[2] <- 3}
--------------- Array lengths: ---------------
System.Int32[] ==> {3[0] <- 3}
--------------- Types tokens: ---------------
3 ==> System.Int32[]
--------------- Stack: ---------------
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
key = __loc__0, value = (HeapRef 3 to System.Int32[])
--------------- Initialized types: ---------------
{ System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Lists }
