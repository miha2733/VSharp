METHOD: System.Int32 VSharp.Test.Tests.Lists.ArrayLength(System.Int32)
RESULT: Totally 3 states:
10
MEMORY DUMP:
Path condition: 0 == f
--------------- Array contents: ---------------
System.Int32[] ==> {
        17[0] <- 0
        17[1] <- 1
        17[2] <- 2
        17[3] <- 3
        17[4] <- 4
        17[5] <- 5
        17[6] <- 6
        17[7] <- 7
        17[8] <- 8
        17[9] <- 9
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {17[0] <- 10}
--------------- Types tokens: ---------------
17 ==> System.Int32[]
--------------- Stack: ---------------
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
key = __loc__0, value = (HeapRef 17 to System.Int32[])
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Lists }

1 + f
MEMORY DUMP:
Path condition: !(0 == f) /\ !(1 + f < 0) /\ !(1 == f)
--------------- Array lengths: ---------------
System.Int32[] ==> {8[0] <- 1 + f}
--------------- Types tokens: ---------------
8 ==> System.Int32[]
--------------- Stack: ---------------
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
key = __loc__0, value = (HeapRef 8 to System.Int32[])
Initialized types = { VSharp.Test.Tests.Lists }

3
MEMORY DUMP:
Path condition: !(0 == f) /\ 1 == f
--------------- Array contents: ---------------
System.Int32[] ==> {11[0] <- 1; 11[1] <- 2; 11[2] <- 3}
--------------- Array lengths: ---------------
System.Int32[] ==> {11[0] <- 3}
--------------- Types tokens: ---------------
11 ==> System.Int32[]
--------------- Stack: ---------------
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
key = __loc__0, value = (HeapRef 11 to System.Int32[])
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Lists }
